import org.w3c.dom.Element
import org.w3c.dom.Node
import org.w3c.dom.NodeList

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url = 'https://files.minecraftforge.net/maven' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.1.0"
}

repositories {
    jcenter()
    mavenCentral()
    maven {
        name 'LDTTeam - Modding'
        url 'https://ldtteam.jfrog.io/ldtteam/modding/'
    }
    flatDir {
        dirs 'libs'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven'

ext.configFile = file "build.properties"
configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

sourceSets {
    api {
        java {
            srcDir 'src/api/java'
        }
        resources {
            srcDir 'src/api/resources'
        }
        compileClasspath += configurations.getByName("minecraft")
    }
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
            srcDir 'src/main/generated/resources'
        }
        compileClasspath += sourceSets.main.compileClasspath
        compileClasspath += sourceSets.api.output
    }
}

configurations {
    contained {
        transitive = false
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.15.2-31.2.21'
    apiImplementation "com.intellij:annotations:+@jar"
    implementation 'com.intellij:annotations:+@jar'
    implementation "org.mariuszgromada.math:MathParser.org-mXparser:4.0.0"
    contained "org.mariuszgromada.math:MathParser.org-mXparser:4.0.0"
    implementation "com.ldtteam:datagenerators:0.1.35-ALPHA"
}

version = '1.15.2' + System.getenv().containsKey("Version") ? System.getenv("Version") : 'null'
group = 'com.ldtteam' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'structurize'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20200805-1.15.1'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('runClient')

            // Recommended logging data for a userdev environment
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            // OPTIFINE GUIDE
            // find and download/compile latest OptiFineDevTweaker, classifier "all"
            // put this and (unpacked) optifine into mods in runClient folder
            // alternate or comment out (if you have default gradle cache location) next property to target "caches/forge_gradle/minecraft_repo/versions/{mcVersion}/client.jar"
            property 'ofdev.mcjar', 'P:\\apps\\common\\gradle-cache\\caches\\forge_gradle\\minecraft_repo\\versions\\1.15.2\\client.jar'

            mods {
                structurize {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        server {
            workingDirectory project.file('runServer')

            // Recommended logging data for a userdev environment
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            mods {
                structurize {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        data {
            workingDirectory project.file('runClient')

            // Recommended logging data for a userdev environment
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'structurize', '--all', '--output', file('src/main/generated/resources'), '--input', file('src/main/resources')

            mods {
                structurize {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
    }
}

task apiJar(type: Jar) {
    from sourceSets.api.output
    classifier 'api'
}

javadoc {
    source += sourceSets.api.allSource
}

task packageJavadoc(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
    from sourceSets.api.allJava
}

idea {
    module {
        inheritOutputDirs = true
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    from sourceSets.api.output
    from sourceSets.main.output

    from(configurations.contained.files) {
        include '*'
        into 'META-INF/libraries'
    }

    manifest {
        attributes([
            'Maven-Artifact': "${project.group}:${project.archivesBaseName}:${project.version}",
            "Specification-Title": "structurize",
            "Specification-Vendor": "ldtteam",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${project.version}",
            "Implementation-Vendor" :"ldtteam",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group

            artifact reobfArtifact
            artifact packageJavadoc
            artifact sourceJar
            artifact apiJar

            pom {
                url = 'https://github.com/ldtteam/Structurize'
                licenses {
                    license {
                        name = 'GNU GENERAL PUBLIC LICENSE Version 3'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.en.html'
                    }
                }
                developers {
                    developer {
                        id = 'OrionDevelopment'
                        name = 'Marc Hermans'
                        email = 'marc.hermans@ldtteam.com'
                    }
                    developer {
                        id = 'Raycoms'
                        name= 'Ray Neiheiser'
                        email = 'ray.neiheiser@ldtteam.com'
                    }
                }
                contributors {
                    contributor {
                        id = 'ldtteam'
                        name = 'Let\'s Develop Together - Team'
                        email = 'info@ldtteam.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/ldtteam/structurize.git'
                    developerConnection = 'scm:git:ssh://github.com/ldtteam/structurize.git'
                    url = 'https://github.com/ldtteam/Structurize'
                }
            }

            //Replace all deobf dependencies with normal jar references.
            pom.withXml { xmlProvider ->
                final Element document = xmlProvider.asElement()

                //Remove all deobf deps.
                final NodeList groupIdNodes = document.getElementsByTagName("groupId")
                groupIdNodes.each { groupIdNodeObject ->
                    final Node groupIdNode = (Node) groupIdNodeObject
                    final String groupId = groupIdNode.getFirstChild().getTextContent().trim()
                    groupIdNode.setTextContent(groupId.replace("deobf.", ""))
                }

                //Remove MC Forge.
                final NodeList dependencies = document.getElementsByTagName("dependency")
                final List<Node> dependencyCache = new ArrayList<>()
                dependencies.each { dep -> dependencyCache.add(dep) }

                dependencyCache.each {dependencyNode ->
                    final Element dependencyElement = (Element) dependencyNode

                    final NodeList groupIdNodesInDependency = dependencyElement.getElementsByTagName("groupId")
                    groupIdNodesInDependency.each {groupIdNodeInDep ->
                        final String groupId = groupIdNodeInDep.getFirstChild().getTextContent().trim()
                        if (groupId == "net.minecraftforge")
                        {
                            final NodeList artifactIdNodesInDependency = dependencyElement.getElementsByTagName("artifactId")
                            artifactIdNodesInDependency.each { artifactIdNodeInDep ->
                                final String artifactId = artifactIdNodeInDep.getFirstChild().getTextContent().trim()
                                if (artifactId == "forge")
                                {
                                    dependencyNode.getParentNode().removeChild(dependencyNode)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

task setupDecompWorkspace {
    afterEvaluate {
        println "Setup"
    }
}

task setupCIWorkspace {
    afterEvaluate {
        println "Setup"
    }
}

curseforge {
    if (System.getenv().CURSEAPIKEY != null && System.getenv().CURSERELEASETYPE != null)
    {
        apiKey = System.getenv().CURSEAPIKEY

        project {
            id = '298744'
            addGameVersion '1.15.2'
            changelog = file('build/changelog.md')
            changelogType = 'markdown'
            releaseType = System.getenv().CURSERELEASETYPE

            addArtifact apiJar
        }
    }
    else
    {
        logger.lifecycle("Cannot run the CurseUpload sequence. No API-Key or release type has been provided.")
    }
}

task("createChangelog") {
    group = 'upload'

    doLast {
        def teamCityURL = "https://buildsystem.ldtteam.com/"
        def file = new FileOutputStream("build/changelog.md")
        def out = new BufferedOutputStream(file)
        def changesXML = new XmlSlurper().parse(teamCityURL + "guestAuth/app/rest/changes?locator=build:(id:" + teamcity["teamcity.build.id"] + ")")

        def changes = changesXML.change
        println("createChangelog: Identified " + changes.size() + " changes to be written into the changelog.")

        out << "# Minecolonies Changelog \n"
        out << "## Version: _" + version + "_ \n"

        if (changes.size() > 0) {
            for (int i = 0; i < changes.size(); i++) {
                def changeDetailsURL = teamCityURL + "guestAuth/app/rest/changes/id:" + changes[i].@id.text()
                def changeDetailsXml = new XmlSlurper().parse(changeDetailsURL)
                def changeComment = changeDetailsXml.comment.text().trim()

                out << "* " + changeComment + "\n"
            }
        } else {
            out << "No Changes detected!"
        }

        out.close()
    }
}
