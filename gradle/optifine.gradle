import java.nio.file.Files

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "de.undercouch:gradle-download-task:4.1.2"
    }
}

ext.opc += [
    getStringMapProperty: { String propertyName ->
        // syntax: key|value;key|value;key|value ...
        String[] entries = opc.getProperty(propertyName).split(";")
        def result = [:]

        for (entry in entries) {
            String[] parts = entry.split("\\|")
            result.put(parts[0], parts[1])
        }

        return result;
    },
]

project.afterEvaluate {
    def optifineFileNameWildcard = "OptiFine_*"
    def optifineFileName = opc.getProperty("optifineVersion").isEmpty() ? null : "OptiFine_" + opc.getProperty("optifineVersion") + ".jar" 

    def optifineTweakerFileNameWildcard = "aa_do_not_rename_OptiFineDevTweaker*"
    def optifineTweakerFileName = opc.getProperty("optiFineDevTweaker").isEmpty() ? null : opc.getProperty("optiFineDevTweaker").split("/")[1]
    
    def optifineMcJar = opc.getProperty("optifineMcJarPath").isEmpty() ? null : opc.getProperty("optifineMcJarPath")

    def downloadFolder = project.buildDir.toPath().resolve("optifine_cache")
    def modsFolder = project.file(minecraft.runs.client.workingDirectory).toPath().resolve("mods")
    def shadersFolder = project.file(minecraft.runs.client.workingDirectory).toPath().resolve("shaderpacks")

    if (opc.isFeatureEnabled("optifine")) {
        if (optifineFileName == null || optifineTweakerFileName == null)
        {
            println "optifineVersion=" + opc.getProperty("optifineVersion")
            println "optiFineDevTweaker=" + opc.getProperty("optiFineDevTweaker")
            throw new GradleException("optifineVersion or optiFineDevTweaker is empty, check gradle.properties")
        }

        println "OptiFine version: " + opc.getProperty("optifineVersion")
        println "OptiFine Tweaker version: " + opc.getProperty("optiFineDevTweaker").split("/")[0]

        apply plugin: de.undercouch.gradle.tasks.download.DownloadTaskPlugin

        if (optifineMcJar != null) {
            minecraft {
                runs {
                    client {
                        property 'ofdev.mcjar', optifineMcJar
                    }
                }
            }
        }

        mkdir downloadFolder
        mkdir shadersFolder

        if (!Files.exists(downloadFolder.resolve(optifineFileName))) {
            // optifine doesnt have timestamps nor etags
            download {
                src "https://optifine.net/download?f=" + optifineFileName
                dest downloadFolder.resolve(optifineFileName).toFile()
            }
        }

        download {
            src "https://github.com/OpenCubicChunks/OptiFineDevTweaker/releases/download/" + opc.getProperty("optiFineDevTweaker")
            dest downloadFolder.resolve(optifineTweakerFileName).toFile()
            onlyIfModified true
            useETag "all"
        }

        copy {
            include optifineFileName, optifineTweakerFileName
            from downloadFolder
            into modsFolder
        }

        delete fileTree(modsFolder).matching {
            exclude optifineFileName, optifineTweakerFileName
            include optifineFileNameWildcard, optifineTweakerFileNameWildcard
        }

        if (project.hasProperty("shadersToUse")) {
            def filesToKeep = []

            for (shader in opc.getStringMapProperty("shadersToUse")) {
                filesToKeep += shader.key

                download {
                    src shader.value
                    dest shadersFolder.resolve(shader.key).toFile()
                    onlyIfModified true
                    useETag "all"
                }
            }

            delete fileTree(shadersFolder).matching {
                exclude filesToKeep
                exclude "*.txt" // possibly shaders configs files
            }
        }
    }
    else {
        delete fileTree(modsFolder).matching {
            include optifineFileNameWildcard, optifineTweakerFileNameWildcard
        }
    }

    task cleanOptifine() {
        group "Optifine"
        description "Deletes cached Optifine files + from [client run]/mods all Optifine files + content of [client run]/shaderpacks"

        doLast {
            delete fileTree(modsFolder).matching {
                include optifineFileNameWildcard, optifineTweakerFileNameWildcard
            }
            delete downloadFolder
            delete fileTree(shadersFolder).matching {
                exclude "*.txt" // possibly shaders configs files
            }
        }
    }
    tasks.clean.finalizedBy cleanOptifine
}
